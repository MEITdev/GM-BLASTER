<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_gun_02_box_alt3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>o_button_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit from parent
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialise the button
event_inherited();
text = "";

//create array of available guns
// Slot [0]
weapons_slot[0] = o_ship_02_dummyGun;
weapons_slot[1] = o_ship_01_turret;
weapons_slot[2] = o_ship_02_turret;
weapons_slot[3] = o_ship_03_turret;

// initialize with the first gun
gun_choice = 0;

// check what is the value and set it
for (i = 0; i &lt;= array_length_1d(weapons_slot) - 1; i++)
{
    if instance_exists(global.ship.slot[2])
    {

        if object_get_name(global.ship.slot[2].object_index) == object_get_name(weapons_slot[i])
        {
                gun_choice = i;
        } //else gun_choice = 0;
    }
    else
        gun_choice = 0;
}

// create the gun stats for the gun
gun_stats = instance_create(x - sprite_width/2, y-sprite_height/2, o_gun_stats);
gun_stats.owner = id;
if instance_exists(global.ship.slot[2])
{
    // do nothing really
}
else
{
    // if there is no weapon just add the default one
    add_weapon(o_ship_02_dummyGun, 2);
}

// Get the detailsfrom the gun for the Gun Stats display
gun_stats.damage = weapons_slot[gun_choice].damage;
gun_stats.ammo_capacity = weapons_slot[gun_choice].ammo_capacity;
gun_stats.recharge_time = weapons_slot[gun_choice].recharge_time;
gun_stats.fire_rate = weapons_slot[gun_choice].fire_rate;
// now set the price
for (i=0; i&lt;array_length_1d(global.current_player.purchased); i+=1)
{
    if object_get_name(global.ship.slot[2].object_index) == global.current_player.purchased[i]
    {
        weapons_slot[gun_choice].price = 0;
    }
};
gun_stats.price = weapons_slot[gun_choice].price;
gun_stats.energy_consumption = weapons_slot[gun_choice].energy_consumption;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if the gun is owned
is_owned = false;
for (i=0; i&lt;array_length_1d(global.current_player.purchased); i+=1)
{
    // for each weapon in the purchased list, set the price to 0
    if object_get_name(global.ship.slot[2].object_index) == global.current_player.purchased[i]
    {
        is_owned = true;
        show_debug_message("Gun OWNED");
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the purchase button variable
purchase_button = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the purchased label variable
purchased_label = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instantiate the PURCHASE button
global.purchase_update[2] = false;
if is_owned == false &amp;&amp; (object_get_parent(global.ship.slot[2].object_index) != o_empty_slot)
{  
    purchase_button = instance_create(0, 0, o_purchase_slot_button);
    purchase_button.owner = id;
    purchase_button.x = x + sprite_width/2;
    purchase_button.y = y - purchase_button.sprite_height/2 - 2;
    purchase_button.owner_slot = 2;
}
else
{
    if instance_exists(purchase_button)
    {
        with(purchase_button)
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the ammo buy button variable
ammo_buy = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage the OWNED label object
// set the label
// but not for the empty slot (dummy gun)
if is_owned == true &amp;&amp; (object_get_parent(global.ship.slot[2].object_index) != o_empty_slot)
{
    show_debug_message("Gun OWNED and is NOT EMPTY SLOT");
    if instance_exists(purchased_label)
    {
        with (purchased_label)
        {
            instance_destroy();
        }
    }
   purchased_label = instance_create(x, y, o_gun_box_purchased);
   show_debug_message("SO CREATE A LABEL");
}
else
{
    if instance_exists(purchased_label)
    {
        with (purchased_label)
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage the AMMO BUY button
if is_owned == true &amp;&amp;
    ((object_get_parent(global.ship.slot[2].object_index) != o_empty_slot) &amp;&amp;
    (object_get_parent(global.ship.slot[2].object_index) != o_parent_power_gun))
{    
    //Instantiate the reload ammo button
    if instance_exists(ammo_buy)
    {
        with(ammo_buy)
        {
            instance_destroy();
        }
    }
    ammo_buy = instance_create(0, 0, o_purchase_slot_ammo_button);
    ammo_buy.owner = id;
    ammo_buy.x = x + sprite_width/2;
    ammo_buy.y = y - ammo_buy.sprite_height/2 - 2;
    ammo_buy.owner_slot = 2;
}
else
{
    if instance_exists(ammo_buy)
    {
        with(ammo_buy)
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for purchase updates
if global.purchase_update[2] == true
{
    global.purchase_update[2] = false;
    
    // update the gun stats
    // now set the price
    for (i=0; i&lt;array_length_1d(global.current_player.purchased); i+=1)
    {
        // for each weapon in the purchased list, set the price to 0
        if object_get_name(global.ship.slot[2].object_index) == global.current_player.purchased[i]
        {
            weapons_slot[gun_choice].price = 0;
        }
    }

    show_debug_message("PRICE: " + string(weapons_slot[gun_choice].price));
    gun_stats.price = weapons_slot[gun_choice].price;
    
    if object_get_parent(global.ship.slot[2].object_index) != o_empty_slot
    {
    
        if instance_exists(purchased_label)
        {
            with (purchased_label)
            {
                instance_destroy();
            }
        }
        purchased_label = instance_create(x, y, o_gun_box_purchased);            
    }
    
    //Instantiate the reload ammo button (only for non POWER weapons
    if  (object_get_parent(global.ship.slot[2].object_index) != o_empty_slot) &amp;&amp;
        (object_get_parent(global.ship.slot[2].object_index) != o_parent_power_gun)    
    {
        if instance_exists(ammo_buy)
        {
            with(ammo_buy)
            {
                instance_destroy();
            }
        }
        ammo_buy = instance_create(0, 0, o_purchase_slot_ammo_button);
        ammo_buy.owner = id;
        ammo_buy.x = x + sprite_width/2;
        ammo_buy.y = y - ammo_buy.sprite_height/2 - 2;
        ammo_buy.owner_slot = 2;
    }
    else
    {
        if instance_exists(ammo_buy)
        {
            with(ammo_buy)
            {
                instance_destroy();
            }
        }
    }
    
    ///Instantiate the PURCHASE button
    if instance_exists(purchase_button)
    {
        with(purchase_button)
        {
            instance_destroy();
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle available weapons

if gun_choice &gt;= array_length_1d(weapons_slot) - 1
{
    gun_choice = 0;
}
else
{
    gun_choice += 1;
}

// destroy if existing gun
if instance_exists(global.ship.slot[2])
{
    with(global.ship.slot[2])
    {
        instance_destroy();
    }
}
   
// now attach the weapon    
//add_weapon(o_ship_new, weapons_slot[gun_choice], 1);
//global.ship.slot[2] = instance_create(global.ship.ship_mount_x[2], global.ship.ship_mount_y[2], weapons_slot[gun_choice]);
//global.ship.slot[2].gun_slot_id = 2;

add_weapon(weapons_slot[gun_choice], 2);

// Read the data from the gun instance
gun_stats.damage = weapons_slot[gun_choice].damage;
gun_stats.ammo_capacity = weapons_slot[gun_choice].ammo_capacity;
gun_stats.recharge_time = weapons_slot[gun_choice].recharge_time;
gun_stats.fire_rate = weapons_slot[gun_choice].fire_rate;
// now set the price
for (i=0; i&lt;array_length_1d(global.current_player.purchased); i+=1)
{
    if object_get_name(global.ship.slot[2].object_index) == global.current_player.purchased[i]
    {
        weapons_slot[gun_choice].price = 0;
    }
};
gun_stats.price = weapons_slot[gun_choice].price;
gun_stats.energy_consumption = weapons_slot[gun_choice].energy_consumption;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if the gun is owned
is_owned = false;
for (i=0; i&lt;array_length_1d(global.current_player.purchased); i+=1)
{
    // for each weapon in the purchased list, set the price to 0
    if object_get_name(global.ship.slot[2].object_index) == global.current_player.purchased[i]
    {
        is_owned = true;
        show_debug_message("Gun OWNED");
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage the OWNED label object
// set the label
// but not for the empty slot (dummy gun)
if is_owned == true &amp;&amp; (object_get_parent(global.ship.slot[2].object_index) != o_empty_slot)
{
    show_debug_message("Gun OWNED and is NOT EMPTY SLOT");
    if instance_exists(purchased_label)
    {
        with (purchased_label)
        {
            instance_destroy();
        }
    }
   purchased_label = instance_create(x, y, o_gun_box_purchased);
   show_debug_message("SO CREATE A LABEL");
}
else
{
    if instance_exists(purchased_label)
    {
        with (purchased_label)
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instantiate the PURCHASE button
if is_owned == false &amp;&amp; (object_get_parent(global.ship.slot[2].object_index) != o_empty_slot)
{  
    if instance_exists(purchase_button)
    {
        with (purchase_button)
        {
            instance_destroy();
        }
    }
    purchase_button = instance_create(0, 0, o_purchase_slot_button);
    purchase_button.owner = id;
    purchase_button.x = x + sprite_width/2;
    purchase_button.y = y - purchase_button.sprite_height/2 - 2;
    purchase_button.owner_slot = 2;
}
else
{
    if instance_exists(purchase_button)
    {
        with(purchase_button)
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage the AMMO BUY button
if is_owned == true &amp;&amp;
    ((object_get_parent(global.ship.slot[2].object_index) != o_empty_slot) &amp;&amp;
    (object_get_parent(global.ship.slot[2].object_index) != o_parent_power_gun))
{    
    //Instantiate the reload ammo button
    if instance_exists(ammo_buy)
    {
        with(ammo_buy)
        {
            instance_destroy();
        }
    }
    ammo_buy = instance_create(0, 0, o_purchase_slot_ammo_button);
    ammo_buy.owner = id;
    ammo_buy.x = x + sprite_width/2;
    ammo_buy.y = y - ammo_buy.sprite_height/2 - 2;
    ammo_buy.owner_slot = 2;
}
else
{
    if instance_exists(ammo_buy)
    {
        with(ammo_buy)
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the image
image_index = gun_choice;
draw_self();
//draw_text(x,y,string(gun_choice));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
