<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>o_button_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialise the button
event_inherited();
text = "Buy!";
total_price = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Purchase the gus

// loop through the choices (weapons on the ship)
for (i = 0; i &lt; global.ship.ship_slots - 1; i++)
{
    total_price = total_price + global.ship.slot[i].price;
}

// if the player has enough money, save the ship
if (global.current_player.credits - total_price) &gt;= 0
{
    // update the amount of credits available

    // UNCOMMENT AFTER TESTING (decrements credits after purchase)
//    global.current_player.credits = global.current_player.credits - total_price;

    
    // TESTING ====================================
    // update the list of purchased items

    
//    global.current_player.purchased[0] = string(object_get_name(global.ship.slot[0].object_index));
//    global.current_player.purchased[1] = string(object_get_name(global.ship.slot[1].object_index));        
//    global.current_player.purchased[2] = string(object_get_name(global.ship.slot[2].object_index));

    
        
    // loop through the list of already purchased weapons and see if the weapon is there
    for (i = 0; i &lt; global.ship.ship_slots - 1; i++)
    {
        for (j = 0; j &lt;= array_length_1d(global.current_player.purchased) - 1; j++)
        {
            if object_get_name(global.ship.slot[i].object_index) == global.current_player.purchased[j]
            {
                // if the name is already in the index, do not save
            }
            else
            {
                // otherwise add this to the purchased list
                global.current_player.purchased[j+1] = object_get_name(global.ship.slot[i].object_index);
            }
        }
    }

            
//    else global.current_player.purchased[array_length_1d(global.current_player.purchased) + 1] = object_get_name(global.ship.slot[i].object_index);

    // save the player and the ship configuration 
    update_player(global.current_player.save_slot);
    save_player_ship(global.current_player.ship_save_file);
    
    dialog_box(room_width/2, room_height/2, 100, 100, "Done!", "Changes saved! Thank you!");
    avatar = instance_create(dialog.x - 48, dialog.y, o_robot_avatar);
    dialog.avatar = avatar.object_index;
    avatar.image_xscale = .5;
    avatar.image_yscale = .5;
    dialog.ttl = 10;    
}
else
{
    // otherwise show a dialog box
    dialog_box(room_width/2, room_height/2, 100, 100, "Insufficient funds!", "Not enough money. Sorry, changes will not be saved!");
    avatar = instance_create(dialog.x - 48, dialog.y, o_robot_avatar);
    dialog.avatar = avatar.object_index;
    avatar.image_xscale = .5;
    avatar.image_yscale = .5;
    dialog.ttl = 10;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
for (i = 0; i &lt;= array_length_1d(global.current_player.purchased) - 1; i++)
{
    draw_text(room_width/2,128 + (i*24), string(i) + ": " + global.current_player.purchased[i]);
}
draw_text(room_width/2, 64, "ship_slots: " + string(global.ship.ship_slots));
draw_text(room_width/2, 96, "purchased_len: " + string(array_length_1d(global.current_player.purchased)));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
