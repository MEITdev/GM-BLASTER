<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_weapon_mission_stats</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the object

// variable to store reference to the parent object
slot_id = noone; // start with noone
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set opacity
image_alpha = .7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the ammo and hull status values
if instance_exists(global.ship)
{
    if instance_exists(global.ship.slot[slot_id])
    {
        // if the gun is a power gun
        if object_get_parent(global.ship.slot[slot_id].object_index) == o_parent_power_gun
        {
            ammo_status = global.ship.slot[slot_id].energy_level;
            hull_status = 
                (global.ship.slot[slot_id].hull / global.ship.slot[slot_id].max_hull) * 100;
        }
        
        // if the slot is empty set default zero values
        else if object_get_parent(global.ship.slot[slot_id].object_index) == o_empty_slot
        {
            ammo_status = 0;
            hull_status = 0;
        }
        
        // if the gun is a projectile weapon
        else
        {
            ammo_status = global.ship.slot[slot_id].ammo;
            hull_status =
                (global.ship.slot[slot_id].hull / global.ship.slot[slot_id].max_hull) * 100;
        }
        
    }
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the stats
draw_self();

draw_set_font(f_gun_hull);
draw_set_colour(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

// change the colour of the text depending on the status of the weapon
if round(hull_status) &gt;= 75
{
    draw_set_colour(c_green);
}
else if round(hull_status) &lt;= 50 &amp;&amp; round(hull_status) &gt; 25
{
    draw_set_colour(c_yellow);
}
else
{
    draw_set_colour(c_red);
}

// draw the ammo counter of the gun
draw_text(x + 6, y + 4, string(round(hull_status)) + "%");

draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_font(f_gun_ammo);
// draw the hull status of the gun
draw_text(x + 64, y + 4, string(ammo_status));

// DRAW what weapon it is
draw_set_font(f_gun_type_stats_message);
draw_set_valign(fa_bottom);
draw_set_halign(fa_center);
if slot_id == 0
{
    text_to_draw = "LEFT WEAPON"
}
else if slot_id == 1
{
    text_to_draw = "RIGHT WEAPON"
}
else if slot_id == 2
{
    text_to_draw = "TURRET"
}

draw_text(round(x + sprite_width/2), y, text_to_draw);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
