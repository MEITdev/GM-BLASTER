<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the boss SCARAB object - Level 1 Boss
if instance_exists(global.ship)
{
    if score &gt;= 750 &amp;&amp; !(instance_exists(o_enemy_boss_01))
    {
        global.boss = instance_create(room_width/2, 0, o_enemy_boss_01);
        
        // Set the ship slots, this depends on the type of the ship
        global.boss.ship_slots = 3;
        global.boss.shield = 25;
        global.boss.armor = 50;
        global.boss.hull = 100;
        
        // instantiate the slots upon creation
        for (i = 0; i &lt;= global.boss.ship_slots - 1; i++)
        {
            global.boss.slot[i] = 0;
        }
    
        // each ship has its mount values to fit the guns nicely on it.
        // REQUIREMENT: all guns must have origin on the X set to the mounting side
        // and the Y origin in such a way that the mount_y can be 0    
        global.boss.ship_mount_x[0] = (global.boss.sprite_width/2 * -1);
        global.boss.ship_mount_y[0] = +4;
    
        global.boss.ship_mount_x[1] = (global.boss.sprite_width/2);
        global.boss.ship_mount_y[1] = +4;
        
        // TESTING attaching the turret
        global.boss.ship_mount_x[2] = 0;
        global.boss.ship_mount_y[2] = -8;
    
            
        // attach guns to the ship
        global.boss.slot[0] = instance_create(global.boss.ship_mount_x[0], global.boss.ship_mount_y[0], o_enemy_boss_01_Lgun);
        global.boss.slot[0].gun_slot_id = 0;
    
        global.boss.slot[1] = instance_create(global.boss.ship_mount_x[1], global.boss.ship_mount_y[1], o_enemy_boss_01_Rgun);
        global.boss.slot[1].gun_slot_id = 1;
    
        global.boss.slot[2] = instance_create(global.boss.ship_mount_x[2], global.boss.ship_mount_y[2], o_enemy_boss_01_turret);
        global.boss.slot[2].gun_slot_id = 2;
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
