<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_parent_gun</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the laser
// start shooting
can_fire = true;

// initialise variables for child objects to override
max_energy_level = 0;
energy_level = 0;
hull = 0;
armor = 0;
gun_slot_id = 0;

// controls
action_button = "";
action_mouse_button = "";

// alarm for power recharge
alarm[ENERGY_RECHARGE] = 1;

// start the alarm
alarm[LASER_LGUN] = 1;

// speed of the projectiles (DEFAULT)
projectile_speed = 10;

// correction coordinates for spawning projectiles
correction_x = 0;
correction_y = 0;

old_x = 0;
old_y = 0;


// Gun stats - displayed in the hangar - override
damage = 1;
ammo_capacity = max_energy_level;
recharge_time = room_speed;
fire_rate = room_speed/8;
price = 100;
energy_consumption = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recharge the energy
if energy_level &lt; max_energy_level
{
    energy_level += 1;
}
// reset the timer
// recharge every one seconds, this should be a variable
// set depending on the gun always, or modified by the
// skills / upgrades
alarm[ENERGY_RECHARGE] = room_speed / 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow the user to fire and reset the alarm
if can_fire == false
{
    can_fire = true;
}
else
{
}
alarm[LASER_LGUN] = room_speed/4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update position

// get the global current players ship pointer
//ship = instance_find(global.current_player.ship, 1);

// if this specific type of ship for this weapon
if instance_exists(global.ship)
{
    // correction coordinates to negate the X and Y error in sprites
   //correction_x = 0;
    //correction_y = 0;
    
    x = (global.ship.x + global.ship.ship_mount_x[gun_slot_id]);
    y = (global.ship.y + global.ship.ship_mount_y[gun_slot_id]);
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle user input
if instance_exists(global.ship)
{
    
    if can_fire == true
    {
        if (keyboard_check(ord(action_button))) || mouse_check_button(action_mouse_button)
        {
            if energy_level &gt; 0
            {
                // create the laser instance
                // instance_create(x, y-20, o_laser);
                
                projectile = instance_create(x + correction_x , y + correction_y, o_laser);
                projectile.direction = image_angle + 90;
                projectile.speed = projectile_speed;
                
                // reset the cooldown counter
                can_fire = false;
                // subtract the ammo if not in the hangar
                this_room = room_get_name(room);
                if this_room != "r_mothership_hangar"
                {
                    energy_level -= 1;
                }
            }
            else
            {
                // no ammo left...
                instance_create(x, y-20, o_flare);
                // Play no ammo sound and display something
                
            }
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw ammo counter and gun stats
draw_self();
/*
draw_sprite_ext(s_ammo_counter, 0, x-62, y-15, 1, 1, 0, c_white, 1);
draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
draw_text(x-32, y, energy_level);
*/
draw_set_font(f_gun_ammo);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
