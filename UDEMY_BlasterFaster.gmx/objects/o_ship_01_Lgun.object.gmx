<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ship_01_Lgun</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>o_parent_power_gun</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the laser
event_inherited(); // super();

// Override the gun specific values
action_button = "1";
action_mouse_button = global.ACTION_01;

// initialise energy
max_energy_level = 100;
energy_level = max_energy_level;
armor = 0;
hull = 2;

// correction for the lasers spawn X and Y coordinate
correction_x = -5;
correction_y = -24;

// create the hull status indicator
hull_status = instance_create(0, 0, o_hull_gun);
hull_status.parent_gun = object_index;
// create the ammo counter indicator
ammo_counter = instance_create(0, 0, o_ammo_counter);
ammo_counter.parent_gun = object_index;

//re-read the ammo capacity for the gun stats object
ammo_capacity = max_energy_level;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Power recharge rate

//Inherit
event_inherited();

//Override relevant values
alarm[ENERGY_RECHARGE] = room_speed;

/*
///Recharge the energy
if energy_level &lt; max_energy_level
{
    energy_level += 1;
}
// reset the timer
// recharge every one seconds, this should be a variable
// set depending on the gun always, or modified by the
// skills / upgrades
alarm[ENERGY_RECHARGE] = room_speed;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rate of fire
event_inherited();

//Override the rate of fire value
alarm[LASER_LGUN] = room_speed/6;

/*
///Allow the user to fire and reset the alarm
if can_fire == false
{
    can_fire = true;
}
else
{
}
alarm[LASER_LGUN] = room_speed/4;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Die code
if hull == 0
{
    // remove self from the list of purchased items
    remove_from_purchased(object_index);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the hull and energy_level status indicators
if instance_exists(global.ship)
{
    hull_status.image_index = hull;
    hull_status.x = global.ship.x + global.ship.ship_mount_x[gun_slot_id];
    hull_status.y = global.ship.y + global.ship.ship_mount_y[gun_slot_id] + 16;
    
    // update the value to be displayed on the ammo counter
    ammo_counter.counter = energy_level;
    // update the ammo counter position
    ammo_counter.x = global.ship.x + global.ship.ship_mount_x[gun_slot_id];
    ammo_counter.y = global.ship.y + global.ship.ship_mount_y[gun_slot_id] + 44;
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Force update the X nad Y coordinates
// this will ensure the values are updated before the attached
// guns are in their draw phase
if instance_exists(global.ship.slot[gun_slot_id])
{   

    x = (global.ship.x + global.ship.ship_mount_x[gun_slot_id]);
    y = (global.ship.y + global.ship.ship_mount_y[gun_slot_id]);
    
}
//if global.boss.hspeed &gt; 0 x += 1; else x-= 2;
draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw ammo counter and gun stats
event_inherited();
/*

draw_self();

draw_sprite_ext(s_ammo_counter, 0, x-62, y-15, 1, 1, 0, c_white, 1);
draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
draw_text(x-32, y, energy_level);

// draw the gun hull and armor
draw_circle_colour(x-64, y+16, 2 * armor, c_blue, c_green, 2);
draw_circle_colour(x-64, y+32, 2 * hull, c_red, c_yellow, 2);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
