<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the controller
// load the saved settins
if file_exists("default_ship.ini")
{
    ini_open("default_ship.ini");

    ship_type = ini_read_string("ship", "type", 0);
    ship_shield = ini_read_real("ship", "shield", 0);
    ship_armor = ini_read_real("ship", "armor", 0);
    ship_hull = ini_read_real("ship", "hull", 0);
    ship_speed = ini_read_real("ship", "speed", 0);
    ship_slots = ini_read_real("ship", "ship_slots", 0);

    // read player name
    player_name = ini_read_string("player", "name", "dead");
    global.current_player.name = player_name;    
    
    // store pointer to the created ship as the players current ship
    global.ship = instance_create(room_width/2, room_height - 64, asset_get_index(ship_type));
    
    // Set the ship slots, this depends on the type of the ship
    global.ship.ship_slots = ship_slots;
    global.ship.shield = ship_shield;
    global.ship.armor = ship_armor;
    global.ship.hull = ship_hull;
    global.ship.movement_speed = ship_speed;
    
    // instantiate the slots upon creation
    for (i = 0; i &lt;= global.ship.ship_slots - 1; i++)
    {
        global.ship.slot[i] = 0;
        global.ship.ship_mount_x[i] = ini_read_real("slots", string(i) + "_mount_x", 0);
        global.ship.ship_mount_y[i] = ini_read_real("slots", string(i) + "_mount_y", 0);
        //ini_write_real("slots", string(i) + "_mount_y", global.ship.ship_mount_y[i]);
    }

    // each ship has its mount values to fit the guns nicely on it.
    // REQUIREMENT: all guns must have origin on the X set to the mounting side
    // and the Y origin in such a way that the mount_y can be 0    
//    global.ship.ship_mount_x[0] = (global.ship.sprite_width/2) * -1;
//    global.ship.ship_mount_y[0] = 0;

//    global.ship.ship_mount_x[1] = (global.ship.sprite_width/2);
//    global.ship.ship_mount_y[1] = 0;

    
    
    // attach guns to the ship
    for (i = 0; i &lt;= global.ship.ship_slots -1; i++)
    {
        gun_to_create = asset_get_index(ini_read_string("slots", string(i), 0));
        //add_weapon(ship, asset_get_index(gun_to_create), i);
        global.ship.slot[i] = instance_create(global.ship.ship_mount_x[i], global.ship.ship_mount_y[i], gun_to_create);
        global.ship.slot[i].gun_slot_id = i;
    }
   
    ini_close();
}
else
{
    // if there is no save file load the default ship configuration
    // store pointer to the created ship as the players current ship
    global.ship = instance_create(room_width/2, room_height - 64, o_ship_new);
    
    // Set the ship slots, this depends on the type of the ship
    global.ship.ship_slots = 3;
    global.ship.shield = 3;
    global.ship.armor = 3;
    global.ship.hull = 3;
    global.ship.movement_speed = 7;
    
    // instantiate the slots upon creation
    for (i = 0; i &lt;= global.ship.ship_slots - 1; i++)
    {
        global.ship.slot[i] = 0;
    }

    // each ship has its mount values to fit the guns nicely on it.
    // REQUIREMENT: all guns must have origin on the X set to the mounting side
    // and the Y origin in such a way that the mount_y can be 0    
    global.ship.ship_mount_x[0] = (global.ship.sprite_width/2) * -1;
    global.ship.ship_mount_y[0] = 0;

    global.ship.ship_mount_x[1] = (global.ship.sprite_width/2);
    global.ship.ship_mount_y[1] = 0;

    
    // TESTING attaching the turret
    global.ship.ship_mount_x[2] = 0;
    global.ship.ship_mount_y[2] = 0;
    
    // attach guns to the ship
    global.ship.slot[0] = instance_create(global.ship.ship_mount_x[0], global.ship.ship_mount_y[0], o_ship_01_Lgun);
    global.ship.slot[0].gun_slot_id = 0;
    global.ship.slot[1] = instance_create(global.ship.ship_mount_x[1], global.ship.ship_mount_y[1], o_ship_01_Rgun);
    global.ship.slot[1].gun_slot_id = 1;
 
    global.ship.slot[2] = instance_create(global.ship.ship_mount_x[2], global.ship.ship_mount_y[2], o_ship_01_turret);
    global.ship.slot[2].gun_slot_id = 2;
        
    
 
    // and save it so in the next boot we just load it to the game
    save_game("default_ship.ini");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
