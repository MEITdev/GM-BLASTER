<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ship_slots = 0;
shield = 0;
armor = 0;
hull = 0;
movement_speed = 0;
max_movement_speed = 0;

// speed boost, this will be set to TRUE with the alarm at the start
//speed_boost = true;
// can the player use boost? initial = true
can_use_boost = true;

// start with no booster speed
//booster_speed = 0;


// alarm that allows the player to use the speed boost
//alarm[SPEED_BOOST] = 1;


// for push back events, if the player can be hit
can_be_hit = true;

// X and Y used in the Dash effect when using the speed boost
old_x = 0;
old_y = 0;
draw_dash_sprite = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save X and Y for the dash animation
with (global.ship)
{
    old_x = x;
    old_y = y;

    // update the old_x and old_y for each turret
    for (i = 0; i &lt;= ship_slots - 1; i++)
    {
        if instance_exists(slot[i])
        {
            slot[i].old_x = slot[i].x;
            slot[i].old_y = slot[i].y;
        }
    }

}
// allow another sprite to be drawn
draw_dash_sprite = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow the use of speed boost
can_use_boost = true;

// reset the timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle the Speed Booster
// If the player is under the boost effect he cannot be hit
/*
if speed_boost == true
{
    speed_boost = false;
    // start the boost
    global.ship.movement_speed = 15;
    // player cannot be hit by lasers
    can_be_hit = false;
    // call the alarm that will stop the boost
    image_alpha = .5;
    
    // call timer again to disable the boost 
    // lasts 1 second
    alarm[SHIP_BOOSTER] = room_speed;
}
else if speed_boost == false
{
*/
    //speed_boost = true;
    movement_speed = max_movement_speed;
    can_be_hit = true;
    // disable the dash effect
    draw_dash_sprite = false;
    image_alpha = 1;
    
    // now loop all the guns and set the alpha for them
    for (i = 0; i &lt;= ship_slots - 1; i++)
    {
        if instance_exists(slot[i])
        {
            slot[i].image_alpha = 1;
        }
    }

//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset the vspeed and the can_be_hot of the player sgip
can_be_hit = true;
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle user input

// Select control type depending on the settings
if (global.Controller == 'Mouse')
{
//    if mouse_check_button(mb_left)
//    {
        target_x = mouse_x;
        target_y = mouse_y;
        if point_distance(x, y, target_x, target_y) &gt; 5
        {
           move_towards_point(target_x, target_y, movement_speed);
        }
        else 
        {
            speed = 0;
        }
//    }
}
else if (global.Controller == 'Keyboard')
{
    if keyboard_check(vk_lshift)
    {
        if can_use_boost == true
        {
            can_use_boost = false;
            alarm[BOOSTER_ALLOWED] = room_speed * 5;

            //speed_boost = false;
            // start the boost
            movement_speed = max_movement_speed + 5;
            // player cannot be hit by lasers
            can_be_hit = false;
            
            draw_dash_sprite = true;
            
            
            // call the alarm that will stop the boost
            image_alpha = .5;

            // set the initial X and Y for the dash effect sprites
            old_x = x;
            old_y = y;
            
            // now loop all the guns and set the alpha for them
            for (i = 0; i &lt;= ship_slots - 1; i++)
            {
                if instance_exists(slot[i])
                {
                    slot[i].image_alpha = .5;
                    // set the old X and Y values for the dash effect
                    slot[i].old_x = slot[i].x;
                    slot[i].old_y = slot[i].y;
                }
            }
            
            // how long until the alarm is reset
            // after 1 second the boost will be unavailable and the countdown to allow the boost again will start via alarm
            alarm[SHIP_BOOSTER] = room_speed;
        }
    }
    
/*    
    // TESTING
    if keyboard_check(global.LEFT) &amp;&amp; keyboard_check(vk_lshift)
    {
        // if can boost
        if speed_boost == true
        {
            can_be_hit = false;
            image_alpha = .5;
            if booster_speed &gt; 0
            {
                booster_speed -= 1;
            }
            else
            {
                speed_boost = false;
                can_be_hit = true;
            }
            x -= booster_speed;
       }
    }
    else if keyboard_check(global.RIGHT) &amp;&amp; keyboard_check(vk_lshift)
    {
        // if can boost
        if speed_boost == true
        {
            if booster_speed &gt; 0
            {
                booster_speed -= 1;
            }
            else
            {
                speed_boost = false;
            }
            x += booster_speed;
        }
    }

    // reset the alpha of the ship
    if speed_boost == false image_alpha = 1;
*/    
    // keyboard controls as well
    if keyboard_check(global.LEFT)
    {
        x -= movement_speed;
    }
    if (keyboard_check(global.RIGHT))
    {
        x += movement_speed;
    }
    
    if (keyboard_check(global.UP))
    {
        y -= movement_speed;
    }
    if (keyboard_check(global.DOWN))
    {
        y += movement_speed;
    }
}


// Create the laser - default weapon
//if (keyboard_check_pressed(vk_space))
//{
//    instance_create(x, y-10, o_laser);
//}

// Restrict the ship to the window
x = clamp(x, 16, room_width-16);
y = clamp(y, 16, room_height-16);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Danger Indicator

// create Danger Indicator
// TODO: this will work only if the player has the right upgrade
//if instance_exists(o_asteroid_grey_01)
//{
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEV DEBUG TOOLS

// return to the main menu
if (keyboard_check(vk_backspace))
{
    
    room_goto(r_menu);
}

// full all the stats
if (keyboard_check(vk_tab))
{
    shiled = 7;
    armor = 7;
    hull = 7;
}

// increase score
if (keyboard_check_pressed(vk_delete))
{
    score += 50;
}

if (keyboard_check_pressed(vk_home))
{
    instance_create(room_width/2, 0, o_armor_powerup);
    instance_create(room_width/2 + 32, 0, o_hull_powerup);
    instance_create(room_width/2 - 32, 0, o_shield_powerup);
    instance_create(room_width/2 - 64 , 0, o_laser_powerup);

    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Die code
if (hull &lt;= 0)
{

    create_explosion(x, y);
    instance_destroy();
    
    // Create the menu button
    instance_create(room_width/2, room_height/2, o_menu_button);
        
    // Save the payer score to the local highscore file
    highscore_add(global.current_player.name, score);
    
    // reset score to 0 for next game
    score = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the dash movement effect

draw_self();
with (global.ship)
{
    if can_be_hit == false
    {
//        if draw_dash_sprite == true
//        {
        
 //           draw_dash_sprite = false;
            
            // Draw the ship sprite at the last position saved by the alarm
            to_draw = sprite_index;
            //draw_sprite(to_draw, 0, old_x, old_y);
            draw_sprite_ext(to_draw, 0, old_x, old_y, 1, 1, 0, c_white, .4);

            // create dash effect for the guns as well (for each)
            for (i = 0; i &lt;= ship_slots - 1; i++)
            {
                if instance_exists(slot[i])
                {
                    draw_sprite_ext(slot[i].sprite_index, 0, slot[i].old_x, slot[i].old_y, 1, 1, 0, c_white, .4);
                }
            }

//            old_x = x;
//            old_y = y;
            //sprite_index.image_alpha = .5;
            // reset the timing alarm
            // this will get the X and Y again for another sprite
            if draw_dash_sprite == true
            {
                draw_dash_sprite = false;
                // play with this to get different effect for dash
                alarm[BLUR_TIMER] = room_speed/16;
            }
    //    }
    }
}
/*
// make all the guns blurred as well
for (i = 0; i &lt;= ship_slots - 1; i++)
{
    if instance_exists(slot[i])
    {
        slot[i].image_alpha = .5;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
