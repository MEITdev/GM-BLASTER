<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ship_03_turret</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>o_parent_turrent_gun</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the turret
event_inherited();

// animation settings
image_index = 0;
image_speed = 1;

// Override the values
ammo = 500;
max_ammo = ammo;
hull = 3;
armor = 0;
action_button = " ";
action_mouse_button = global.ACTION_03;

projectile_speed = 6;

// correction coordinates for spawning projectiles
correction_x = 26;
correction_y = 26;

// create the ammo counter indicator
ammo_counter = instance_create(0, 0, o_ammo_counter_turret);
ammo_counter.parent_gun = object_index;

// Gun stats - displayed in the hangar - override
damage = 2;
ammo_capacity = max_ammo;
recharge_time = 0;
fire_rate = room_speed/4;
price = 500;
energy_consumption = 0;

// create the hull status indicator
hull_status = instance_create(0, 0, o_hull_turret);
hull_status.parent_gun = object_index;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawned projectile variables
//global.projectile_last_angle = 0;
spawn_projectile = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn new Defensive projectile
spawn_projectile = true;
global.projectile_last_angle += 180;
projectile[0] = instance_create(x + lengthdir_x(100, global.projectile_last_angle), y + lengthdir_y(100, global.projectile_last_angle), o_projectile_autodefense_turret);    projectile[0].owner_id = object_index;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire rate
event_inherited();

// Override the fire rate
alarm[LASER_LGUN] = room_speed/4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit from parent class
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Die code
if hull == 0
{
    // remove self from the list of purchased items
    remove_from_purchased(object_index);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update ammo counter and hull status
if instance_exists(global.ship)
{

    hull_status.image_index = hull;
    hull_status.x = global.ship.x + global.ship.ship_mount_x[gun_slot_id];
    hull_status.y = global.ship.y + global.ship.ship_mount_y[gun_slot_id] + 88;

    // update the value to be displayed on the ammo counter
    ammo_counter.counter = ammo;
    // update the ammo counter position
    ammo_counter.x = global.ship.x + global.ship.ship_mount_x[gun_slot_id];
    ammo_counter.y = global.ship.y + global.ship.ship_mount_y[gun_slot_id] + 72;
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Maintain one DEFENSIVE projectile at a time

// should include some animation and timing I guess...

// create the projectile instance
//projectile[0] = 
if !(instance_exists(projectile[0])) &amp;&amp; spawn_projectile == true
{
    spawn_projectile = false;
    show_debug_message("creation last angle: " + string(global.projectile_last_angle));
    //global.projectile_last_angle += 180;
    // spawn new projectile in 2 seconds
    alarm[DEFENSIVE_PROJECTILE] = room_speed * 2;
    
    //projectile[0] = instance_create(x + lengthdir_x(100, global.projectile_last_angle), y + lengthdir_y(100, global.projectile_last_angle), o_projectile_autodefense_turret);    projectile[0].owner_id = object_index;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Force update the X nad Y coordinates
// this will ensure the values are updated before the attached
// guns are in their draw phase
if instance_exists(global.ship.slot[gun_slot_id])
{   

    x = (global.ship.x + global.ship.ship_mount_x[gun_slot_id]);
    y = (global.ship.y + global.ship.ship_mount_y[gun_slot_id]);
    
}
//if global.boss.hspeed &gt; 0 x += 1; else x-= 2;
draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
