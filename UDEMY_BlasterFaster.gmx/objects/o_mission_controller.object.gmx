<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create relevant spawners for this level

// store mission time limit in a global variable so it is accessible for other objects 
// if required
global.time_left = 0;

// DEFAULT variable used to track if the current mission has been completed
global.mission_complete = false;

// Intro room - prologue
if room_get_name(room) == "r_intro_screen"
{

    // set that this is a cutscene - do not show the timer
    is_cutscene = true;

    // set stupid number for the level number
    level = 9001; // OVER 9000 !!!!
   
    // start the timer with the current time
    start_time = date_current_datetime();
    time_limit = 5; // 5 seconds for now, then do something else  
}

// Intro mission 00 
if room_get_name(room) == "r_mission_00"
{

    // set that this is a cutscene - do not show the timer
    is_cutscene = false;

    // used for dialog messages
    level = 0;

    // each instance takes one argument = the level
    asteroid_spawner = instance_create(0,0, o_asteroid_spawner);
    asteroid_spawner.level = 0;
    space_objects_spawner = instance_create(0,0, o_space_objects_spawner);
    space_objects_spawner.level = 0;

    // each instance takes one argument = the level
    enemy_spawner = instance_create(0,0, o_enemy_spawner);
    enemy_spawner.level = 0;    
    enemy_spawner.spawn = true;
            
    instance_create(0,0, o_view_controller);
    ship_controller_instance = instance_create(0,0, o_ship_controller);
    ship_controller_instance.level = 0;

    
    // START THE TIMER
    start_time = date_current_datetime();
    // What is the time limit for the mission in Seconds
    time_limit = 120;

    // Messages for different levels triggers
    mission0_stage1 = false;
    mission0_stage2 = false;    
    mission0_stage3 = false;   
    
    // dialog variables
    mission0_stage1_dialog = false;
    mission0_stage2_dialog = false;         
    mission0_stage3_dialog = false;
    
    // HERE use the time remaining as a trigger for the asteroid spawner
    asteroid_spawner.stage1 = 10;
    asteroid_spawner.stage2 = 30;
    asteroid_spawner.stage3 = 100;
}



if room_get_name(room) == "r_mission_01"
{
    is_cutscene = false;
    // each instance takes one argument = the level
    enemy_spawner = instance_create(0,0, o_enemy_spawner);
    enemy_spawner.level = 1;
    enemy_spawner.spawn = true;
    asteroid_spawner = instance_create(0,0, o_asteroid_spawner);
    asteroid_spawner.level = 1;
    asteroid_spawner.spawn_asteroids = true;    // spawn asteroids from the beginning of the mission
    
    space_objects_spawner = instance_create(0,0, o_space_objects_spawner);
    space_objects_spawner.level = 1;
    enemy_boss_spawner = instance_create(0,0, o_enemy_boss_spawner);
    enemy_boss_spawner.level = 1;
    
    instance_create(0,0, o_view_controller);
    ship_controller_instance = instance_create(0,0, o_ship_controller);
    ship_controller_instance.level = 1;

    // used for dialog messages
    level = 1;
    // START THE TIMER
    start_time = date_current_datetime();
    // What is the time limit for the mission in Seconds
    time_limit = 150;

    // Messages for different levels triggers
    mission1_stage1 = false;
    mission1_stage2 = false;    
    // Target socres
    // Here decide what stage the player is in, depending on score or target objectives later
    enemy_spawner.stage1 = 100;
    enemy_spawner.stage2 = 200;
    enemy_spawner.stage3 = 400;
}

if room_get_name(room) == "r_mission_02"
{
    is_cutscene = false;
    // each instance takes one argument = the level
    enemy_spawner = instance_create(0,0, o_enemy_spawner);
    enemy_spawner.level = 2;
    enemy_spawner.spawn = true;
    asteroid_spawner = instance_create(0,0, o_asteroid_spawner);
    asteroid_spawner.level = 2;
    // start spawning asteroids from the beginning of the mission
    asteroid_spawner.spawn_asteroids = true;
    
    space_objects_spawner = instance_create(0,0, o_space_objects_spawner);
    space_objects_spawner.level = 2;
    enemy_boss_spawner = instance_create(0,0, o_enemy_boss_spawner);
    enemy_boss_spawner.level = 2;
    
    instance_create(0,0, o_view_controller);
    instance_create(0,0, o_ship_controller);

    // used for dialog messages
    level = 2;
    // START THE TIMER
    start_time = date_current_datetime();
    // What is the time limit for the mission in Seconds
    time_limit = 180;

    // Messages for different levels triggers
    mission2_stage1 = false;
    mission2_stage2 = false;    
    mission2_stage3 = false;    
    mission2_stage4 = false;    
            
    // Target socres
    // Here decide what stage the player is in, depending on score or target objectives later
    enemy_spawner.stage1 = 50;
    enemy_spawner.stage2 = 100;
    enemy_spawner.stage3 = 300;
    enemy_spawner.stage4 = 700;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio voiceover variables
warning_voice = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create timeline FLAG variables
timeline_played = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mission Time Events - Controller
diff = date_second_span(start_time, date_current_datetime());

// time to display to the player
global.time_left = round(time_limit - diff);

// give audio warning to the player
if global.time_left == 30 &amp;&amp; warning_voice == false
{
    if global.Sound == "On"
    {
        warning_voice = true;
        audio_play_sound(a_time_limit_low, 6, false);
    }
}

// intro level
if room_get_name(room) == "r_intro_screen"
{
    if diff &gt; time_limit
    {
        // create the fade object and jump to the mission 00 room
        fader = instance_create(0,room_height, o_bottom_up_fade);
        fader.when_to_die = (room_height * -2);
        fader.at_what_speed = -8;
        fader.to_what_room = r_mission_00;
    }
}

if level == 0
{
    // control the asteroid spawner variables
    if diff &gt; asteroid_spawner.stage1 &amp;&amp; mission0_stage1 == false
    {
        // start spawning asteroids
        asteroid_spawner.spawn_asteroids = true;
        enemy_spawner.stage = 1;
        // set the stage value
        stage = 1;
        // set the mission stage flag so this is done only once
        mission0_stage1 = true;
        // set this to true to not show the dialog window more than once
        asteroid_spawner.stage1 = true;        
    }
    else if diff &gt; asteroid_spawner.stage2 &amp;&amp; mission0_stage2 == false
    {
        enemy_spawner.stage = 2;    
        stage = 2;
        mission0_stage2 = true;
        asteroid_spawner.stage1 = false;
        asteroid_spawner.stage2 = true;
    }
    else if diff &gt; asteroid_spawner.stage3 &amp;&amp; mission0_stage3 == false
    {
        stage = 3;
        enemy_spawner.stage = 3;        
        mission0_stage3 = true;
        asteroid_spawner.stage2 = false;
        asteroid_spawner.stage3 = true;
    }    

    if diff &gt; time_limit
    {
        enemy_spawner.spawn = false;
        enemy_spawner.stage = 4;
        asteroid_spawner.spawn_asteroids = false;        
        asteroid_spawner.stage3 = false;
        asteroid_spawner.stage4 = true;        
        global.mission_complete = true;
    }
}

if level == 1
{
    if diff &gt; time_limit
    {
    
        // save the current state of the player and ship stats
        update_player(global.current_player.save_slot);
        save_player_ship(global.current_player.ship_save_file);
        
        // if it took more than 5 seconds to finish the level, reset
        // for testing - just go to the main menu
        room_goto(r_mission_failed);
    }
}
if level == 2
{
    if diff &gt; time_limit
    {
    
        // save the current state of the player and ship stats
        update_player(global.current_player.save_slot);
        save_player_ship(global.current_player.ship_save_file);
        
        // if it took more than 5 seconds to finish the level, reset
        // for testing - just go to the main menu
        room_goto(r_mission_failed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mission COMPLETED tasks
if room_get_name(room) == "r_mission_00" &amp;&amp; global.mission_complete == true
{
   // add the completed mission to the list
    global.CompletedMissions = 0;

    // set flag that the intro has been completed
    global.CompletedIntroMission = true;
    // reset flag
    global.mission_complete = false;
    
        // stop spawning asteroids
    asteroid_spawner.spawn_asteroids = false;
    
    // Run the timeline (Docking) animation
    if timeline_played == false
    {
        timeline_played = true;
        ///Start the TimeLine
        timeline_index = tl_intro_docking;
        timeline_position = 0;
        timeline_running = true;
        timeline_loop = false;      
       
        // do this only once....
        // save the current state of the player and ship stats
        update_player(global.current_player.save_slot);
        save_player_ship(global.current_player.ship_save_file);
        // now make sure to load the values
        load_player_data(global.current_player.save_slot);
        
    }        
} 

if room_get_name(room) == "r_mission_01" &amp;&amp; global.mission_complete == true
{

   // add the completed mission to the list
    global.CompletedMissions = 1; 
    
    // Save the player information
    update_player(global.current_player.save_slot);   
    // save player ship
    save_player_ship(global.current_player.ship_save_file);
    // now load player data
    load_player_data(global.current_player.save_slot);

    
    // create the fader instance
    fader = instance_create(0,room_height, o_bottom_up_fade);
    fader.when_to_die = (room_height * -2);
    fader.at_what_speed = -8;
    fader.to_what_room = r_mission_completed;
       
    //room_goto(r_mission_completed);
}

if room_get_name(room) == "r_mission_02" &amp;&amp; global.mission_complete == true
{
   // add the completed mission to the list
    global.CompletedMissions = 2; 

    show_debug_message("MISSION CONTROLLER - MISSION DONE");

    // reset flag
    global.mission_complete = false;
    
    // Save the player information
    update_player(global.current_player.save_slot);   
    // save player ship
    save_player_ship(global.current_player.ship_save_file);
    // now load player data
    load_player_data(global.current_player.save_slot);

    
    // create the fader instance
    fader = instance_create(0,room_height, o_bottom_up_fade);
    fader.when_to_die = (room_height * -2);
    fader.at_what_speed = -8;
    fader.to_what_room = r_mission_completed;
       
    //room_goto(r_mission_completed);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mission dialogue manager
if level == 0
{
    if asteroid_spawner.stage1 == true &amp;&amp; mission0_stage1_dialog == false
    {
        mission0_stage1_dialog = true;
        // display message
        dialog_box(104, 346, 58, 550, "Asteroid field", "Try to shake the enemy off in the asteroid field! It may work... you never know", 5);
        global.avatar = instance_create(584, 296, o_pirate_avatar);
        global.avatar.image_xscale = 0.5;
        global.avatar.image_yscale = 0.5;        
    }
    if asteroid_spawner.stage2 == true &amp;&amp; mission0_stage2_dialog == false
    {
        mission0_stage2_dialog = true;
        // display message
        dialog_box(104, 346, 58, 550, "Hold on tight", "Try to make it alive, do not scratch your ship! Not even a little...", 5);
        global.avatar = instance_create(584, 296, o_pirate_avatar);
        global.avatar.image_xscale = 0.5;
        global.avatar.image_yscale = 0.5;        
    }
    if asteroid_spawner.stage3 == true &amp;&amp; mission0_stage3_dialog == false
    {
        mission0_stage3_dialog = true;
        // display message
        dialog_box(104, 346, 58, 550, "Almost there", "Few more moments and you should clear from the asteroid field and dock!", 5);
        global.avatar = instance_create(584, 296, o_pirate_avatar);
        global.avatar.image_xscale = 0.5;
        global.avatar.image_yscale = 0.5;        
    }
}

if level == 1
{
    if enemy_spawner.stage == 1 &amp;&amp; mission1_stage1 == false
    {
        mission1_stage1 = true;
        // display message
        dialog_box(104, 346, 58, 550, "Stage 1", "Enough with the warmup. Watch out for the enemy bombers. Do what you are paid for now!", 5);
        global.avatar = instance_create(584, 296, o_pirate_avatar);
        show_debug_message("TTL: " + string(global.dialog.ttl));
        global.avatar.image_xscale = 0.5;
        global.avatar.image_yscale = 0.5;
    }
    
    if enemy_spawner.stage == 2 &amp;&amp; mission1_stage2 == false
    {
        mission1_stage2 = true;
        // display message
        dialog_box(104, 346, 58, 550, "Stage 2", "Shit just got real. More bombers incoming, watch out for your guns, you don't want to end up without weapons on your ship now would you?!", 5);        
        global.avatar = instance_create(584, 296, o_pirate_avatar);
        global.avatar.image_xscale = 0.5;
        global.avatar.image_yscale = 0.5;
    
    }
}

///Mission dialogue manager
if level == 2
{
    if enemy_spawner.stage == 1 &amp;&amp; mission2_stage1 == false
    {
        mission2_stage1 = true;
        // display message
        dialog_box(104, 346, 58, 550, "Stage 1", "Pile up on those Asteroids! NOW!", 5);
        global.avatar = instance_create(584, 296, o_pirate_avatar);
        global.avatar.image_xscale = 0.5;
        global.avatar.image_yscale = 0.5;
    }
    
    if enemy_spawner.stage == 2 &amp;&amp; mission2_stage2 == false
    {
        mission2_stage2 = true;
        // display message
        dialog_box(104, 346, 58, 550, "Stage 2", "Ah crap, it seems that this asteroid field is not undefended after all... Kill them all!", 5);        
        global.avatar = instance_create(584, 296, o_pirate_avatar);
        global.avatar.image_xscale = 0.5;
        global.avatar.image_yscale = 0.5;
    
    }
    
    if enemy_spawner.stage == 3 &amp;&amp; mission2_stage3 == false
    {
        mission2_stage3 = true;
        // display message
        dialog_box(104, 346, 58, 550, "Stage 3", "Watch out! They are trying to flank us!", 5);        
        global.avatar = instance_create(584, 296, o_pirate_avatar);
        global.avatar.image_xscale = 0.5;
        global.avatar.image_yscale = 0.5;
    
    }
    
    if enemy_spawner.stage == 4 &amp;&amp; mission2_stage4 == false
    {
        mission2_stage4 = true;
        // display message
        dialog_box(104, 346, 58, 550, "Stage 4", "What the hell? They must be defending something important.", 5);        
        global.avatar = instance_create(584, 296, o_pirate_avatar);
        global.avatar.image_xscale = 0.5;
        global.avatar.image_yscale = 0.5;
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display the mission timer
if is_cutscene == false
{
    draw_set_font(f_timer);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    // select colour depending on the timer
    if (global.time_left / time_limit) &gt; 0.5
    {
        draw_set_colour(c_green);
    }
    else
    {
        draw_set_colour(c_red);
    }
    
    // do not draw the text if the time is already &lt; 0
    // Draw the timer on the screen
    if global.time_left &gt;= 0
    {
        draw_text(room_width/2, 32, string(global.time_left));
    }
    
    // reset font to default
    draw_set_colour(c_white);
    draw_set_font(f_score);

}
else if is_cutscene == true
{
    // do not draw anything
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display STAGE notifications - IMPLEMENT!!!!
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
