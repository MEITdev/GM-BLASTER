<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_parent_gun</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the turret
// start shooting
can_fire = true;

// initialise variables
ammo = 0;
max_ammo = ammo;
hull = 0;
armor = 0;
gun_slot_id = 0;

action_button = "";
action_mouse_button = "";

// start the alarm
//alarm[LASER_LGUN] = 1;

// speed of the projectiles (DEFAULT)
projectile_speed = 10;
projectile = noone;
projectile[0] = noone;
projectile[1] = noone;

// correction coordinates for spawning projectiles
correction_x = 0;
correction_y = 0;


old_x = 0;
old_y = 0;


// Gun stats - displayed in the hangar - override
damage = .5;
ammo_capacity = max_ammo;
recharge_time = 0;
fire_rate = room_speed/8;
price = 350;
energy_consumption = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow the user to fire and reset the alarm
if can_fire == false
{
    can_fire = true;
}
else
{
}
alarm[LASER_LGUN] = room_speed/8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update position

ship = global.ship;

if instance_exists(ship)
{
    // correction coordinates to negate the X and Y error in sprites
    //correction_x = 0;
    //correction_y = 0;

    x = (ship.x + ship.ship_mount_x[gun_slot_id]);
    y = (ship.y + ship.ship_mount_y[gun_slot_id]);    
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle user input
if instance_exists(global.ship)
{

    if instance_exists(global.ship.slot[2])
    {
        if can_fire == true
        {
            if (keyboard_check(ord(action_button))) || mouse_check_button(action_mouse_button)
            {
                if ammo &gt; 0
                {
                    // Spawn projectiles and effects depending on the turret type
                    // [2] is always the top turret mount point
                    if object_get_name(global.ship.slot[2].object_index) == "o_ship_02_turret"
                    {
                        // create the projectile instance
                        show_debug_message("TURRET_02/ correction_x: " + string(correction_x) + " / correction_y: " + string(correction_y));
                        projectile = instance_create(x + lengthdir_x(correction_x, image_angle), y + lengthdir_y(correction_y, image_angle), o_plasma_turret_01_laser);
                        // create the muzzle flash
                        show_debug_message("TURRET_02 after projectile / correction_x: " + string(correction_x) + " / correction_y: " + string(correction_y));                        
                        muzzle_flash = instance_create(x + lengthdir_x(correction_x, image_angle), y + lengthdir_y(correction_y, image_angle), o_plasma_turret_01_gun_flare);
                        muzzle_flash.owner = object_index;
                        //muzzle_flash.owner = o_ship_02_turret;
                                    
                        projectile.direction = image_angle;
                        projectile.speed = projectile_speed;
                        // adjust the image angle
                        projectile.image_angle = image_angle - 90;
                        muzzle_flash.image_angle = image_angle - 90;
                        
                        // reset the fire timer
                        alarm[LASER_LGUN] = room_speed/8;

                        
                        can_fire = false;
                        // subtract the ammo if not in the hangar
                        this_room = room_get_name(room);
                        if this_room != "r_mothership_hangar"
                        {
                            ammo -= 1;
                        }
                    }
                    else if object_get_name(global.ship.slot[2].object_index) == "o_ship_01_turret"
                    {
                        // create the projectile instance
                        projectile[0] = instance_create(x + lengthdir_x(correction_x, image_angle - correction_x), y + lengthdir_y(correction_y, image_angle - correction_y), o_projectile);
                        projectile[1] = instance_create(x + lengthdir_x(correction_x, image_angle + correction_x), y + lengthdir_y(correction_y, image_angle + correction_y), o_projectile);
            
                        // create the muzzle flash
                        muzzle_flash[0] = instance_create(x + lengthdir_x(correction_x, image_angle - correction_x), y + lengthdir_y(correction_y, image_angle - correction_y), o_projectile_turret_01_gun_flare);
                        muzzle_flash[0].owner = object_index;
                        muzzle_flash[0].muzzle_id = 0;
                        muzzle_flash[1] = instance_create(x + lengthdir_x(correction_x, image_angle + correction_x), y + lengthdir_y(correction_y, image_angle + correction_y), o_projectile_turret_01_gun_flare);
                        muzzle_flash[1].owner = object_index;                        
                        muzzle_flash[1].muzzle_id = 1;
                                                           
                        for (i = 0; i &lt;= array_length_1d(projectile) - 1; i++)
                        {
                            projectile[i].direction = image_angle;
                            projectile[i].speed = projectile_speed;
                            // adjust the image angle
                            projectile[i].image_angle = image_angle - 90;
                            muzzle_flash[i].image_angle = image_angle - 90;
                        }

                        // reset the fire timer
                        alarm[LASER_LGUN] = room_speed/8;
                                                
                        can_fire = false;
                        // subtract the ammo if not in the hangar
                        this_room = room_get_name(room);
                        if this_room != "r_mothership_hangar"
                        {
                            ammo -= 1;
                        } 
                    }
                    
                    
                    /*else if object_get_name(global.ship.slot[2].object_index) == "o_ship_03_turret"
                    {
                        /*
                        // create the projectile instance
                        //projectile[0] = 
                        if !(instance_exists(projectile[0]))
                        {
                            projectile[0] = instance_create(x + lengthdir_x(100, image_angle), y + lengthdir_y(100, image_angle), o_projectile_autodefense_turret);
                            projectile[0].owner_id = o_ship_03_turret;
                            
                        }
                        
                        // reset the fire timer
                        alarm[LASER_LGUN] = room_speed/8;
                        
                        
                        can_fire = false;
                        // subtract the ammo if not in the hangar
                        this_room = room_get_name(room);
                        if this_room != "r_mothership_hangar"
                        {
                            ammo -= 1;
                        } 
                    }*/
                }
                else
                {
                    // no ammo left...
                    //instance_create(x, y, o_flare);
                    // Play no ammo sound and display something
                    
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Font
draw_set_font(f_gun_ammo);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
