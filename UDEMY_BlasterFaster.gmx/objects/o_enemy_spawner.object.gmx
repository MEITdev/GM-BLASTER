<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize enemy spawner

// default level value
level = 0;
// give 0.25 seconds for the object to be created and the caller to set the level value
alarm[LEVEL_CHOOSER] = room_speed / 4;

//alarm[POWERUP_SPAWNER] = room_speed*5; // ... 5 seconds

// keep track of the level stage, used for dialog display
stage = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Horizontal spawner flags
hspawner_spawned = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy spawner flag
spawn = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the timers according to the level
if level == 0
{
    alarm[SPAWNER_ALARM] = room_speed * 5; // wait 5 seconds
}
if level == 1
{
    alarm[SPAWNER_ALARM] = room_speed*21; // wait 21 seconds because of music
}
if level == 2
{
    alarm[SPAWNER_ALARM] = room_speed*10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the enemies

if level == 0
{
    var enemy = o_enemy_zero;
    var alarm_time = random_range(room_speed * 1.5, room_speed * 3);

    if stage == 1
    {
        alarm_time = random_range(room_speed * 2, room_speed * 3);
    }
    if stage == 2
    {
        alarm_time = random_range(room_speed * 3, room_speed * 5);
    }
    if stage == 3
    {
        alarm_time = random_range(room_speed * 15, room_speed * 20);
    }
    if stage == 4
    {
        alarm_time = room_speed * 60; // will not get called
    }
 
    
    // do not spawn when boss is present
    if instance_exists(o_enemy_boss_02)
    {
        // do not reset the alarm
    }
    else
    {
        // reset the alarm
        alarm[SPAWNER_ALARM] = alarm_time;
    }    
    
    if spawn == true
    {       
        // Create the enemy
        instance_create(random_range(16, room_width-16), room_height + 16, enemy);
    }
}

if level == 1
{
    
    var enemy = o_enemy_one;
    var alarm_time = random_range(room_speed*.5, room_speed*2);
    
    // Increase the difficulty
    if (score &gt;= stage1)
    {
        stage = 1;
        enemy = choose(o_enemy_one, o_enemy_one, o_enemy_two);
        alarm_time = random_range(room_speed*.25, room_speed*1.5);
    }
    // Increase the difficulty
    if (score &gt;= stage2)
    {
        stage = 2;
        enemy = choose(o_enemy_one, o_enemy_two, o_enemy_two);
        alarm_time = random_range(room_speed*.5, room_speed*2);
    }
    
    // If boss is present do not reset the timer
    // this can be hardcoded for now as this is the only boss in this level
    if instance_exists(o_enemy_boss_01)
    {
        // do not reset the alarm
    }
    else
    {
        // reset the alarm
        alarm[SPAWNER_ALARM] = alarm_time;
    }
    
    // Create the enemy
    instance_create(random_range(16, room_width-16), -16, enemy);

}

if level == 2
{
    var enemy = noone;
    var alarm_time = random_range(room_speed*.5, room_speed*2);
    
    if (score &gt;= stage1)
    {
        stage = 1;
        // more asteroids start to appear &gt;&gt; This is done via the asteroid spawner
        
    }   
    if (score &gt;= stage2)
    {
        // first firing enemies start to appear
        stage = 2;
        // choose what enemies to spawn
        enemy = choose(o_enemy_two);
        // update alarm time
        alarm_time = random_range(room_speed*1, room_speed * 3);
    }   
    if (score &gt;= stage3)
    {
        // side scrolling enemies start to appear
        stage = 3;    
        // choose what enemies to spawn
        enemy = choose(o_enemy_two, o_enemy_three, o_enemy_three);
        // update alarm time
        alarm_time = random_range(room_speed*1, room_speed * 3);
    }   
    if (score &gt;= stage4)
    {
        // turret enemies start appearing - defending the planet
        stage = 4;    
        // choose what enemies to spawn
        enemy = choose(o_enemy_two, o_enemy_two, o_enemy_four, o_enemy_four);
        if hspawner_spawned == false
        {
            // set flag so no more than one horizontal spawner is spawned
            hspawner_spawned = true;
            // instantiate the horizontal enemy spawner
            h_spawner = instance_create(0,0, o_enemy_spawner_horizontal);
        }
            
        // update alarm time
        alarm_time = random_range(room_speed*1, room_speed * 3);  
    }
    
    // do not spawn when boss is present
    if instance_exists(o_enemy_boss_02)
    {
        // do not reset the alarm
    }
    else
    {
        // reset the alarm
        alarm[SPAWNER_ALARM] = alarm_time;
    }

    // create the enemy
    if stage &gt; 1 // first stage does not have enemies in this level
    {
        instance_create(random_range(16, room_width - 16), -16, enemy);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
